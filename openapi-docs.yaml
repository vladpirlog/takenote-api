openapi: 3.0.0
info:
  description: |
    This is the OpenAPI documentation for the TakeNote REST API. You can find
    out more at [https://app.swaggerhub.com/apis/vladpirlog/takenote-api/1.0.0]
    (https://app.swaggerhub.com/apis/vladpirlog/takenote-api/1.0.0).
  version: "1.0.0"
  title: TakeNote REST API
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: avi.pirlog@gmail.com
  license:
    name: MIT License
    url: "https://opensource.org/licenses/MIT"
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/vladpirlog/takenote-api/1.0.0
tags:
  - name: auth
    description: Everything related to the users and authentication
  - name: oauth
    description: OAuth-related endpoints
  - name: 2fa
    description: Endpoints related to two-factor authentication
  - name: notes
    description: Everything related to the users' notes
  - name: collaborators
    description: Other users with the ability to read (and write to) some user's note
  - name: attachments
    description: Images, alongside a title and a description, attached to a note
  - name: tags
    description: Words used for grouping notes around a theme
  - name: password
    description: Password-related operations
paths:
  /:
    get:
      summary: Get server status
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Server is ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
  /auth/me:
    get:
      tags:
        - auth
      summary: Get authenticated user
      operationId: getMe
      security:
        - cookieAccessToken: []
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Authenticated user fetched
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  user:
                    $ref: "#/components/schemas/User"
  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      operationId: login
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "202":
          description: Partial authentication successful, but two-factor authentication required for a full authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  user:
                    $ref: "#/components/schemas/User"
      requestBody:
        $ref: "#/components/requestBodies/Login"
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout
      operationId: logout
      security:
        - cookieAccessToken: []
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: User logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
  /auth/register:
    post:
      tags:
        - auth
      summary: Register
      operationId: register
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 201
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  user:
                    $ref: "#/components/schemas/User"
      requestBody:
        $ref: "#/components/requestBodies/Register"
  /auth/confirm:
    post:
      tags:
        - auth
        - password
      summary: Confirm email address
      operationId: confirm
      parameters:
        - name: token
          in: query
          description: The token to be used for confirmation
          required: true
          schema:
            type: string
            pattern: /^cn[a-zA-Z0-9_-]{24}$/
            maxLength: 26
            minLength: 26
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Email address confirmed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
        "202":
          description: A new confirmation token was sent to the user's email address
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
  /auth/request_confirmation:
    post:
      tags:
        - auth
        - password
      summary: Request a new confirmation token
      operationId: requestConfirmationToken
      security:
        - cookieAccessToken: []
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Confirmation token sent to the user's email address
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
  /auth/reset_password:
    post:
      tags:
        - auth
        - password
      summary: Request reset token using old password
      operationId: resetPassword
      security:
        - cookieAccessToken: []
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Reset token sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
      requestBody:
        $ref: "#/components/requestBodies/OldPassword"
  /auth/forgot_password:
    post:
      tags:
        - auth
        - password
      summary: Request reset token using email or username
      operationId: forgotPassword
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Reset token sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
      requestBody:
        $ref: "#/components/requestBodies/ForgotPassword"
  /auth/new_password:
    post:
      tags:
        - auth
        - password
      summary: Submit forgot token
      operationId: submitForgotToken
      parameters:
        - name: token
          in: query
          description: The token to be checked against the user's reset token
          required: true
          schema:
            type: string
            pattern: /^rs[a-zA-Z0-9_-]{24}$/
            maxLength: 26
            minLength: 26
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Password changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
      requestBody:
        $ref: "#/components/requestBodies/NewPassword"
  /auth/check_token:
    get:
      tags:
        - auth
        - password
      summary: Check token for expiration
      operationId: checkToken
      parameters:
        - name: token
          in: query
          description: The token to be checked
          required: true
          schema:
            type: string
            pattern: /^(rs|cn)[a-zA-Z0-9_-]{24}$/
            maxLength: 26
            minLength: 26
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Reset token valid (not expired)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
  /auth/check_credentials:
    post:
      tags:
        - auth
      summary: Check if the credentials are taken
      operationId: checkCredentials
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Credentials are not taken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
      requestBody:
        $ref: "#/components/requestBodies/CheckCredentials"
  /auth/delete:
    post:
      tags:
        - auth
      summary: Delete account
      operationId: deleteMe
      security:
        - cookieAccessToken: []
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Account is being deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
      requestBody:
        $ref: "#/components/requestBodies/OldPassword"
  /auth/recover:
    post:
      tags:
        - auth
      summary: Recover account
      operationId: recoverMe
      security:
        - cookieAccessToken: []
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Account is now active
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
  /auth/google:
    get:
      tags:
        - auth
        - oauth
      summary: Login with Google
      operationId: oauthGoogle
      parameters:
        - name: code
          in: query
          description: The authorization code given by Google
          required: true
          schema:
            type: string
            pattern: /^.*$/
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Authenticated user fetched
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  user:
                    $ref: "#/components/schemas/User"
  /auth/2fa:
    post:
      tags:
        - auth
        - 2fa
      summary: Enable 2fa
      operationId: enable2fa
      security:
        - cookieAccessToken: []
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Image data fetched
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                required:
                  - status
                  - message
                  - image
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  image:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-]*$/
                    maxLength: 10000
                    description: Base64-encoded image which needs to be scanned by the user with an Authenticator app
    delete:
      tags:
        - auth
        - 2fa
      summary: Disable 2fa
      operationId: disable2fa
      security:
        - cookieAccessToken: []
      parameters:
        - name: code
          in: query
          description: The code generated by the Authenticator app or one of the backup codes
          required: true
          schema:
            type: string
            pattern: /^([0-9]{6}|[a-zA-Z0-9_-]{10})$/
            maxLength: 10
            minLength: 6
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: 2fa disabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
  /auth/2fa/verify:
    post:
      tags:
        - auth
        - 2fa
      summary: Verify 2fa code (initial or login verification)
      operationId: verify2fa
      security:
        - cookieAccessToken: []
        - cookie2faTempToken: []
      parameters:
        - name: code
          in: query
          description: The code generated by the Authenticator app or one of the backup codes
          required: true
          schema:
            type: string
            pattern: /^([0-9]{6}|[a-zA-Z0-9_-]{10})$/
            maxLength: 10
            minLength: 6
        - name: remember
          in: query
          description: If true, 2fa will not be required on login for 30 days, else will be required on every login
          required: true
          schema:
            type: string
            enum:
              - "true"
              - "false"
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "201":
          description: 2fa is now fully enabled
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                required:
                  - status
                  - message
                  - backupCodes
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  backupCodes:
                    description: The backup codes which can be used instead of the regular OTP. Each code is single-use.
                    type: array
                    items:
                      type: object
                      required:
                        - _id
                        - active
                      properties:
                        _id:
                          type: string
                          pattern: /^[a-zA-Z0-9_-]{10}$/
                          maxLength: 10
                        active:
                          type: boolean
                    minItems: 8
                    maxItems: 8
        "200":
          description: Full authentication successful
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  user:
                    $ref: "#/components/schemas/User"
  /notes:
    get:
      tags:
        - notes
      summary: Get all the user's notes
      operationId: allNotes
      security:
        - cookieAccessToken: []
      parameters:
        - name: collaborations
          in: query
          required: false
          schema:
            type: boolean
            description: Specifies whether the notes where the user is collaborating should be included
            default: false
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            format: int32
            description: The number of notes to skip from the result
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            description: The maximum number of notes to return
        - name: archived
          in: query
          required: false
          schema:
            type: boolean
            description: Specifies whether the notes archived/not archived should be sent; if undefined, all the notes are sent
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Notes fetched
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                required:
                  - status
                  - message
                  - notes
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  notes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Note"
                  collaboratingNotes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Note"
    post:
      tags:
        - notes
      summary: Add note
      operationId: addNote
      security:
        - cookieAccessToken: []
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "201":
          description: Note created
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 201
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  note:
                    $ref: "#/components/schemas/Note"
      requestBody:
        $ref: "#/components/requestBodies/AddOrUpdateNote"
  /notes/tags:
    get:
      tags:
        - notes
        - tags
      summary: Get the user's notes by a tag
      operationId: allNotesByTag
      security:
        - cookieAccessToken: []
      parameters:
        - name: tag
          in: query
          required: true
          schema:
            type: string
            description: The tag to search by
        - name: match
          in: query
          required: false
          schema:
            type: boolean
            description: If true, return the notes that contain that exact tag, else do a regexp match
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Notes fetched
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                required:
                  - status
                  - message
                  - notes
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  notes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Note"
  "/notes/{noteID}":
    get:
      tags:
        - notes
      summary: One user's note
      operationId: oneNote
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to return
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Note fetched
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  note:
                    $ref: "#/components/schemas/Note"
    put:
      tags:
        - notes
      summary: Update note
      operationId: updateNote
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to update
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Note updated
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  note:
                    $ref: "#/components/schemas/Note"
      requestBody:
        $ref: "#/components/requestBodies/AddOrUpdateNote"
    delete:
      tags:
        - notes
      summary: Delete note
      operationId: deleteNote
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to delete
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Note deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
  "/notes/{noteID}/duplicate":
    post:
      tags:
        - notes
      summary: Duplicate a note
      operationId: duplicate
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to share
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Note duplicated
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  note:
                    $ref: "#/components/schemas/Note"
  "/notes/{noteID}/share":
    post:
      tags:
        - notes
      summary: Get sharing URL for a note
      operationId: shareLink
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to share
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
        - name: active
          in: query
          description: Set the sharing URL active or not
          required: false
          schema:
            type: boolean
        - name: get_new
          in: query
          description: Create a new URL instead of retrieving the old one
          required: false
          schema:
            type: boolean
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Link fetched
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  shareURL:
                    type: string
                    pattern: /^\/shared\/s[a-zA-Z0-9_-]{24}$/
                    maxLength: 33
                    minLength: 33
                    description: URL path to the shared note
  "/notes/{noteID}/share/collaborators":
    post:
      tags:
        - notes
        - collaborators
      summary: Add note collaborator
      operationId: addCollaborator
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to add collab to
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Collaborator added
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  permission:
                    $ref: "#/components/schemas/Permission"
      requestBody:
        $ref: "#/components/requestBodies/AddCollaborator"
  "/notes/{noteID}/share/collaborators/{permissionID}":
    delete:
      tags:
        - notes
        - collaborators
      summary: Delete note collaborator
      operationId: deleteCollaborator
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to delete collab from
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
        - name: permissionID
          in: path
          description: ID of the permission to delete
          required: true
          schema:
            type: string
            pattern: /^p[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Collaborator deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
  "/notes/{noteID}/tags":
    post:
      tags:
        - notes
        - tags
      summary: Add tags
      operationId: addTags
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of a note to add tags to
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
        - name: tags
          in: query
          description: Tags to add to the note, separated with commas
          schema:
            type: string
            pattern: /^[ -~]{1,400}$/
            maxLength: 400
            minLength: 1
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Tags added
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  tags:
                    type: array
                    maxItems: 20
                    items:
                      $ref: "#/components/schemas/Tag"
    delete:
      tags:
        - notes
        - tags
      summary: Delete tags
      operationId: deleteTags
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of a note to delete tags from
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
        - name: tags
          in: query
          description: Tags to delete from the note, separated with commas
          schema:
            type: string
            pattern: /^.*$/
            maxLength: 1000
            minLength: 0
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Tags deleted
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  tags:
                    type: array
                    maxItems: 20
                    items:
                      $ref: "#/components/schemas/Tag"
  "/notes/{noteID}/attachments":
    post:
      tags:
        - notes
        - attachments
      summary: Add attachment
      operationId: addAttachment
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to add attachment to
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Attachment added
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  attachment:
                    $ref: "#/components/schemas/Attachment"
      requestBody:
        $ref: "#/components/requestBodies/AddAttachment"
  "/notes/{noteID}/attachments/{attachmentID}":
    put:
      tags:
        - notes
        - attachments
      summary: Update attachment
      operationId: updateAttachment
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to update attachment from
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
        - name: attachmentID
          in: path
          description: ID of attachment to update
          required: true
          schema:
            type: string
            pattern: /^a[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Attachment edited
          content:
            application/json:
              schema:
                additionalProperties: false
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                    enum:
                      - 200
                    description: HTTP success status code
                  message:
                    type: string
                    pattern: /^[a-zA-Z0-9_\-.,]*$/
                    maxLength: 1000
                  attachment:
                    $ref: "#/components/schemas/Attachment"
      requestBody:
        $ref: "#/components/requestBodies/UpdateAttachment"
    delete:
      tags:
        - notes
        - attachments
      summary: Delete attachment
      operationId: deleteAttachment
      security:
        - cookieAccessToken: []
      parameters:
        - name: noteID
          in: path
          description: ID of note to delete attachment from
          required: true
          schema:
            type: string
            pattern: /^n[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
        - name: attachmentID
          in: path
          description: ID of attachment to delete
          required: true
          schema:
            type: string
            pattern: /^a[a-zA-Z0-9_-]{24}$/
            maxLength: 25
            minLength: 25
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Attachment deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseBody"
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
components:
  schemas:
    Permission:
      additionalProperties: false
      type: object
      properties:
        _id:
          type: string
          pattern: /^p[a-zA-Z0-9_-]{24}$/
          maxLength: 25
          minLength: 25
        subject:
          additionalProperties: false
          type: object
          required:
            - _id
            - username
            - email
          properties:
            _id:
              type: string
              pattern: /^u[a-zA-Z0-9_-]{24}$/
              maxLength: 25
              minLength: 25
            username:
              type: string
              pattern: /^[a-zA-Z0-9_-]{4,16}$/
              maxLength: 16
              minLength: 4
            email:
              type: string
              pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
              maxLength: 254
              minLength: 3
        level:
          type: integer
          format: int32
          enum:
            - 0
            - 1
    Attachment:
      additionalProperties: false
      type: object
      properties:
        _id:
          type: string
          pattern: /^a[a-zA-Z0-9_-]{24}$/
          maxLength: 25
          minLength: 25
        url:
          type: string
          description: A valid URL of a photo
          pattern: /^[a-zA-Z0-9_\-.:\/\\?!=+\|]$/
          maxLength: 300
          minLength: 5
        title:
          type: string
          pattern: /^[a-zA-Z0-9_\-.,]{0,32}$/
          maxLength: 32
          minLength: 0
        description:
          type: string
          pattern: /^[a-zA-Z0-9_\-.,]{0,256}$/
          maxLength: 256
          minLength: 0
    Tag:
      type: string
      pattern: /^[ -~]{1,20}$/
      maxLength: 20
      minLength: 1
    Note:
      additionalProperties: false
      type: object
      required:
        - _id
        - owner
        - archived
        - share
        - color
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
          pattern: /^n[a-zA-Z0-9_-]{24}$/
          maxLength: 25
          minLength: 25
        title:
          type: string
          pattern: /^[a-zA-Z0-9_\-.,]{0,100}$/
          maxLength: 100
          minLength: 0
        content:
          type: string
          pattern: /^[a-zA-Z0-9_\-.,]{0,10000}$/
          maxLength: 10000
          minLength: 0
        owner:
          type: string
          pattern: /^u[a-zA-Z0-9_-]{24}$/
          maxLength: 25
          minLength: 25
        permissions:
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/Permission"
        attachments:
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/Attachment"
        tags:
          type: array
          maxItems: 20
          items:
            $ref: "#/components/schemas/Tag"
        share:
          additionalProperties: false
          type: object
          required:
            - active
          properties:
            active:
              type: boolean
            code:
              type: string
              pattern: /^s[a-zA-Z0-9_-]{24}$/
              maxLength: 25
              minLength: 25
        archived:
          type: boolean
        color:
          type: string
          pattern: /^#[0-9abcdef]{6}$/
          maxLength: 7
          minLength: 7
        createdAt:
          type: string
          format: date-time
          maxLength: 100
        updatedAt:
          type: string
          format: date-time
          maxLength: 100
    ResponseBody:
      additionalProperties: false
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
          minimum: 200
          maximum: 299
          description: HTTP success status code
        message:
          type: string
          pattern: /^[a-zA-Z0-9_\-.,]*$/
          maxLength: 1000
    User:
      additionalProperties: false
      type: object
      required:
        - _id
        - username
        - email
        - isOAuthUser
        - twoFactorAuth
      properties:
        _id:
          type: string
          pattern: /^u[a-zA-Z0-9_-]{24}$/
          maxLength: 25
          minLength: 25
        username:
          type: string
          pattern: /^[a-zA-Z0-9_-]{4,16}$/
          maxLength: 16
          minLength: 4
        email:
          type: string
          pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
          maxLength: 254
          minLength: 3
        isOAuthUser:
          type: boolean
        twoFactorAuth:
          additionalProperties: false
          type: object
          required:
            - active
            - nextCheck
          properties:
            active:
              type: boolean
            nextCheck:
              type: integer
              format: int64
              minimum: 0
              maximum: 9999999999
              description: 0 if 2fa is required at each login, otherwise a UNIX timestamp representing the next time for a 2fa check
    Error:
      additionalProperties: false
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
          minimum: 400
          maximum: 599
          description: HTTP error status code
        message:
          type: string
          pattern: /^[a-zA-Z0-9_\-.,]*$/
          maxLength: 200
          description: A brief summary of the error
  requestBodies:
    Login:
      content:
        application/x-www-form-urlencoded:
          schema:
            additionalProperties: false
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                maxLength: 254
                description: The user's email or username
              password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password
              g-recaptcha-response:
                type: string
                description: reCAPTCHA token used to verify the user's interaction; only used in the production environment
                pattern: /^.*$/
        application/json:
          schema:
            additionalProperties: false
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                maxLength: 254
                description: The user's email or username
              password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password
      description: The user's credentials required for authentication
      required: true
    Register:
      content:
        application/x-www-form-urlencoded:
          schema:
            additionalProperties: false
            type: object
            required:
              - username
              - email
              - password
              - confirm_password
            properties:
              username:
                type: string
                pattern: /^[a-zA-Z0-9_-]{4,16}$/
                maxLength: 16
                minLength: 4
                description: The chosen username
              email:
                type: string
                pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                maxLength: 254
                minLength: 3
                description: The user's email
              password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password
              confirm_password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password entered again
        application/json:
          schema:
            additionalProperties: false
            type: object
            required:
              - username
              - email
              - password
              - confirm_password
            properties:
              username:
                type: string
                pattern: /^[a-zA-Z0-9_-]{4,16}$/
                maxLength: 16
                minLength: 4
                description: The chosen username
              email:
                type: string
                pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                maxLength: 254
                minLength: 3
                description: The user's email
              password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password
              confirm_password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password entered again
      description: The user's info required for registration
    CheckCredentials:
      content:
        application/x-www-form-urlencoded:
          schema:
            additionalProperties: false
            type: object
            properties:
              username:
                type: string
                pattern: /^[a-zA-Z0-9_-]{4,16}$/
                maxLength: 16
                minLength: 4
                description: The username to be checked
              email:
                type: string
                pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                maxLength: 254
                minLength: 3
                description: The email to be checked
        application/json:
          schema:
            additionalProperties: false
            type: object
            properties:
              username:
                type: string
                pattern: /^[a-zA-Z0-9_-]{4,16}$/
                maxLength: 16
                minLength: 4
                description: The username to be checked
              email:
                type: string
                pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                maxLength: 254
                minLength: 3
                description: The email to be checked
      description: The username and/or email to be checked if taken
    OldPassword:
      content:
        application/x-www-form-urlencoded:
          schema:
            additionalProperties: false
            type: object
            required:
              - old_password
            properties:
              old_password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password
        application/json:
          schema:
            additionalProperties: false
            type: object
            required:
              - old_password
            properties:
              old_password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password
      description: The user's old password required for changing it to a new one
    ForgotPassword:
      content:
        application/x-www-form-urlencoded:
          schema:
            additionalProperties: false
            type: object
            required:
              - email
            properties:
              email:
                type: string
                pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                maxLength: 254
                description: The user's email or username
        application/json:
          schema:
            additionalProperties: false
            type: object
            required:
              - email
            properties:
              email:
                type: string
                pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                maxLength: 254
                description: The user's email or username
      description: The user's current username or email address required for resetting the password when forgotten
      required: true
    NewPassword:
      content:
        application/x-www-form-urlencoded:
          schema:
            additionalProperties: false
            type: object
            required:
              - new_password
              - confirm_new_password
            properties:
              new_password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password
              confirm_new_password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password again
        application/json:
          schema:
            additionalProperties: false
            type: object
            required:
              - new_password
              - confirm_new_password
            properties:
              new_password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password
              confirm_new_password:
                type: string
                format: password
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24}$/
                maxLength: 24
                minLength: 8
                description: The user's password again
      description: The user's old password required for changing it to a new one
    AddOrUpdateNote:
      content:
        application/x-www-form-urlencoded:
          schema:
            additionalProperties: false
            type: object
            properties:
              title:
                type: string
                pattern: /^[a-zA-Z0-9_\-.,]{0,100}$/
                maxLength: 100
                minLength: 0
              content:
                type: string
                pattern: /^[a-zA-Z0-9_\-.,]{0,10000}$/
                maxLength: 10000
                minLength: 0
              archived:
                type: string
                enum:
                  - "true"
                  - "false"
              color:
                type: string
                pattern: /^#[0-9abcdef]{6}$/
                maxLength: 7
                minLength: 7
        application/json:
          schema:
            additionalProperties: false
            type: object
            properties:
              title:
                type: string
                pattern: /^[a-zA-Z0-9_\-.,]{0,100}$/
                maxLength: 100
                minLength: 0
              content:
                type: string
                pattern: /^[a-zA-Z0-9_\-.,]{0,10000}$/
                maxLength: 10000
                minLength: 0
              archived:
                type: string
                enum:
                  - "true"
                  - "false"
              color:
                type: string
                pattern: /^#[0-9abcdef]{6}$/
                maxLength: 7
                minLength: 7
    AddCollaborator:
      content:
        application/x-www-form-urlencoded:
          schema:
            additionalProperties: false
            type: object
            required:
              - user
              - type
            properties:
              user:
                type: string
                pattern: /^([a-zA-Z0-9_-]{4,16})|((([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,})))|((?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24})$/
                maxLength: 254
                minLength: 3
                description: Username, email or id of the user to make collab
              type:
                type: string
                enum:
                  - r
                  - rw
        application/json:
          schema:
            additionalProperties: false
            type: object
            required:
              - user
              - type
            properties:
              user:
                type: string
                pattern: /^([a-zA-Z0-9_-]{4,16})|((([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,})))|((?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&-_.,/\\])[A-Za-z\d@$!%*?&-_.,/\\]{8,24})$/
                maxLength: 254
                minLength: 3
                description: Username, email or id of the user to make collab
              type:
                type: string
                enum:
                  - r
                  - rw
    AddAttachment:
      content:
        multipart/formdata:
          schema:
            additionalProperties: false
            type: object
            required:
              - photo
            properties:
              photo:
                type: string
                format: binary
                description: Image to be added as attachment
              title:
                type: string
                pattern: /^[a-zA-Z0-9_\-.,]{0,32}$/
                maxLength: 32
                minLength: 0
              description:
                type: string
                pattern: /^[a-zA-Z0-9_\-.,]{0,256}$/
                maxLength: 256
                minLength: 0
    UpdateAttachment:
      content:
        application/x-www-form-urlencoded:
          schema:
            additionalProperties: false
            type: object
            properties:
              title:
                type: string
                pattern: /^[ -~]{0,32}$/
                maxLength: 32
                minLength: 0
              description:
                type: string
                pattern: /^[ -~]{0,256}$/
                maxLength: 256
                minLength: 0
        application/json:
          schema:
            additionalProperties: false
            type: object
            properties:
              title:
                type: string
                pattern: /^[ -~]{0,32}$/
                maxLength: 32
                minLength: 0
              description:
                type: string
                pattern: /^[ -~]{0,256}$/
                maxLength: 256
                minLength: 0
  securitySchemes:
    cookieAccessToken:
      type: apiKey
      description: JWT signed token used for authentication
      name: access_token
      in: cookie
    cookie2faTempToken:
      type: apiKey
      description: a temporary id used between the first step of the 2fa and the full authentication
      name: temp_token
      in: cookie